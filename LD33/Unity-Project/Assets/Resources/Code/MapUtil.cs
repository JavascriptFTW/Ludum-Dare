//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Xml;
using System.Collections.Generic;
using System.Text.RegularExpressions;

using UnityEngine;

namespace AssemblyCSharp
{
	public class MapUtil {
		public List<List<Cell>> map = new List<List<Cell>>(); 
		private System.Random heightRNG = new System.Random();
		int width = 0;
		int height = 0;
		int halfWidth = 0;
		int halfHeight = 0;

		public MapUtil (int rows, int columns) {
			GameObject parent = GameObject.Instantiate(Game.mapPrefab, new Vector3(0, 0, 0), Quaternion.identity) as GameObject;

			this.width = rows;
			this.height = columns;
			halfWidth = rows / 2;
			halfHeight = columns / 2;

			Debug.Log (rows);

			for (int x = 0; x < rows; x ++) {
				List<Cell> row = new List<Cell>();
				for (int z = 0; z < columns; z ++) {
					int height = 1;
					if (x < 2 || z < 2 || x > rows - 2 || z > rows - 2) {
						height = 10;
					}
					Cell nextCell = new Cell(x - halfWidth, z - halfHeight, height, parent);

					row.Add(nextCell);

					if (x > 0) {
						nextCell.addNeighbor(map[x - 1][z]);
					}
					if (z > 0) {
						nextCell.addNeighbor(row[z - 1]);
					}
				}
				map.Add(row);
			}
			Game.map = this;
		}

		public int getWidth() {
			return width;
		}

		public int getHeight() {
			return height;
		}

		public int getHalfWidth() {
			return halfWidth;
		}

		public int getHalfHeight() {
			return halfHeight;
		}

		/*private Cell parseCell(string value, int x, int y, GameObject parent) {
			Regex matchPattern = new Regex(@"\(height: (\w+?)\)");
			GroupCollection groups = matchPattern.Match(value).Groups;
			return new Cell(x, y, int.Parse(groups[1].Value), parent);
		}

		private List<Cell> parseRow(string value, int x, GameObject parent) {
		Debug.Log ("Row!!!");
			List<Cell> row = new List<Cell>();
			string[] dataList = value.Split (',');
			int y = 0;
			foreach (string data in dataList) {
			Debug.Log (data);
				row.Add (parseCell (data, x, y, parent));
				y += 1;
			}
			return row;
		}

		public MapUtil (string path, GameObject parent) {
			XmlTextReader reader = new XmlTextReader("Assets/Resources/" + path);
			int x = 0;
			while (reader.Read ()) {
				if (reader.NodeType == XmlNodeType.Text) {
					map.Add(parseRow(reader.Value, x, parent));
					x += 1;
				}
			}
		}*/
	}
}

